---
title: 'Dynamic CSS'
subtitle: 'Layouts & Beyond'
event: 'Covalence Conference'
author: 'miriam'
date: '2019-01-16'
image: '/images/dynamic-css/_cover.jpg'
tags: ['css', 'variables', 'custom properties', 'grid', 'graphs']
---

Don't be fooled by the declarative syntax,
CSS is a powerful language for
building dynamic design systems.

<!-- slide -->

---
layout: title
---

<!-- slide -->

![OddBird Faces](/images/_oddbird/allbirds.svg)

## [OddBird](http://oddbird.net)
Full-Stack **Client Services**

<!-- slide -->

---
image: '/images/dynamic-css/covalence/electron.jpg'
alt: "Hi, my name is Miriam, and I've never used Electron.js"
---

<!-- slide -->

---
image: '/images/dynamic-css/covalence/logos.jpg'
alt: "Ok, so I use it every day‚Ä¶"
---

<!-- slide -->

---
image: '/images/dynamic-css/jsconfus18/learning.jpg'
alt: 'One does not simply "learn" JavaScript'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/dynamic-css/covalence/nativize.jpg'
caption: 'Jessica Lord: [Nativize is the New Normalize](https://www.youtube.com/watch?v=H6IDoraEpO0)'
---

<!-- slide -->

---
layout: template
---

## The **End**!
Just watch her video‚Ä¶

<!-- slide -->

## Let's Talk About **CSS**

<!-- slide -->

## Let's Talk About ~~CSS~~ **History**

<!-- slide -->

## 1993: **HTML**
Markup Language

<!-- slide -->

---
image: '/images/patterns/oddbird-w-logo.jpg'
alt: 'OddBird siblings (Jonny, Carl, and Miriam) in 1994'
---

<!-- slide -->

## One (**Dynamic**) Web
W3C Mission: **Web for All, Web on Everything**

<!-- slide -->

## 1997: **`<font>`** `&&` **`<table>`**
HTML 3.2

<!-- slide -->

## `(‚ïØ'‚ñ°')‚ïØÔ∏µ` **`‚îª‚îÅ‚îª`**
"TABLES ARE FOR **DATA**"

<!-- slide -->

## ~~1996~~ 2000: Cascading **Style Sheets**
Principle of **Least Power**

<!-- slide -->

![CSS is Awesome](/images/dynamic-css/css-is-awesome.jpg)
(This is a **Feature**)

<!-- slide -->

## 2007-2010: Major **Grid Frameworks**
Blueprint, OOCSS, 960gs, Susy, etc‚Ä¶

<!-- slide -->

![OddBird Faces](/images/_oddbird/allbirds.svg)

<!-- slide -->

---
image: '/images/dynamic-css/susy.png'
alt: 'Susy'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/dynamic-css/susy-no.jpg'
alt: 'Susy, scribbled out'
---

<!-- slide -->

## 2009: **`@media`** queries
Safari 4

<!-- slide -->

## 2011: **Responsive** Web Design
[Ethan Marcotte](https://alistapart.com/article/responsive-web-design)

<!-- slide -->

---
image: '/images/dynamic-css/devices.jpg'
alt: 'A zillion different devices of all sizes (original)'
---

<!-- slide -->

## **!** üë®

<!-- slide -->

---
image: '/images/patterns/people-masc.jpg'
alt: 'Masculine emojis'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/patterns/people-femme.jpg'
alt: 'Feminine emojis'
style:
  --image-size: 'contain'
---

<!-- slide -->

---
image: '/images/patterns/people-rando.jpg'
alt: 'Various people emojis'
style:
  --image-size: 'contain'
---

<!-- slide -->

### don't be fooled‚Ä¶
## **Declarative** Syntax **`!=`** **Static** Results

<!-- slide -->

## Go with **the flow**!

<!-- slide -->

---
demo: 'layoutFlow'
---

<!-- slide -->

1. Fluid **Grids**
2. Flexible **Images**
3. Media **Queries**

<!-- slide -->

## 2011: **`calc()`**
Firefox 4

<!-- slide -->

## **Mixed-Unit** Calculations
### `calc(` **`16px`** `+` **`20%`** `)`

<!-- slide -->

## 2012: **Flexbox**
Chrome 21

<!-- slide -->

---
demo: 'layoutFlex'
---

<!-- slide -->

## **Global** Flow
`flex-direction: column;` **|** `flex-wrap: wrap;`

<!-- slide -->

## **Individual** Sizing
grow, shrink, basis **`=>`** `flex: 1 2 auto`;

<!-- slide -->

## üëç
## `-Grow` & `-Shrink` Define **Relationships**!

<!-- slide -->

## 2014: `--css-`**`variables`**
Firefox 31 (unless you count **`currentColor`**)

<!-- slide -->

```scss
.example {
  --color: red;
  background: var(--red);
}
```

<!-- slide -->

## `-<empty>-`**`browser-prefix`**

<!-- slide -->

## `--aka`**`:`** `'custom properties'`**`;`**

<!-- slide -->

## `var(` **`--property-name`** `, fallback)`

<!-- slide -->

## Similar to **Sass**‚Ä¶
(but not the same!)

<!-- slide -->

## `$sass-variables`**`:`** `rad`**`;`**

<!-- slide -->

## Variables Hold **Data**

```scss {data-code=h3}
$brand: hsl(330, 100%, 45%);
```

<!-- slide -->

## Variables are **`$reusable`**
(**D**on't **R**epeat **Y**ourself)

<!-- slide -->

## Sass Variables **Scope**
Based on **Source File Structure**

<!-- slide -->

```scss
:root { $columns: 2; }
.nested-class { /* $columns == undefined */ }

@media (min-width: 30em) {
  :root { /* $columns == undefined */ }
  .nested-class { /* $columns == undefined */ }
}
```

<!-- slide -->

## CSS Variables **Inherit**
Based on **DOM & Cascade**

<!-- slide -->

```scss
:root { --columns: 2; }
.nested-class { /* var(--columns) == 2 */ }

@media (min-width: 30em) {
  :root { --columns: 6; }
  .nested-class { /* var(--columns) == 6 */ }
}
```

<!-- slide -->

## Inherit Everywhere:

```scss
:root {
  --brand-color: hsl(330, 100%, 45%);
}
```

<!-- slide -->

## **Don't** Inherit:

```scss
* {
  --brand-color: initial;
}
```

<!-- slide -->

## **Safe** Inline Styles

```html
<button style="--color: blue;">
```

<!-- slide -->

## **Use** the Variable‚Ä¶

```scss
button {
  background: var(--color, red);
}
```

<!-- slide -->

## ‚Ä¶or **Ignore** the Variable

```scss
button.green {
  background: green;
}
```

<!-- slide -->

## Avoid **Nesting**‚Ä¶

```scss
button {
  background: blue
}

.this button {
  background: red;
}
```

<!-- slide -->

## ‚Ä¶For Lower **Specificity**

```scss
button {
  background: var(--btn-color, blue);
}

.this {
  --btn-color: red;
}
```

<!-- slide -->

## Defaults & Missing **Longhand**

```scss
.example {
  --shadow-y: -1px;
  box-shadow: var(--shadow-x, 0)
              var(--shadow-y, 1px)
              var(--shadow-blur, 0)
              var(--shadow-color, currentColor);
}
```

<!-- slide -->

## Auto-**Prefixing** "Mixins"

```scss
* {
  --clip-path: initial;
  -webkit-clip-path: var(--clip-path);
  clip-path: var(--clip-path);
}
```

<!-- slide -->

## Combine with **`calc()`**

```scss
.example {
  margin: calc(1em + var(--extra-margin));
}
```

<!-- slide -->

## **CSS**Susy!

```css
:root {
  --susy-columns: 1;
  --susy-gutters: 0.25;
  --susy-spread: -1;
  --susy-container-spread: -1;
/*   --susy-static-grid: 1; */
/*   --susy-debug-color: green; */
}
```

<!-- slide -->

## A Variable for **Every Function**‚Ä¶

```css
* {
  /* gutter output math */
  --su-inside-gutters: calc(
      var(--gutter-width) * var(--gutters-inside)
    );

  --su-gutters-left: calc(
      var(--gutter-width) * var(--gutters-left)
    );
}
```

<!-- slide -->

## Media Queries‚Ä¶

```css
@media (min-width: 30em) {
  /* settings */
  :root { --susy-columns: 5; }

  /* layout */
  [data-susy~='2']{ --span: 1; }
  [data-susy~='6'] { --span: 3; }
  [data-susy~='6'] * { --susy-columns: 3 }
  [data-susy~='3'] { --span: 3; }
  [data-susy~='4'] { --span: 2; }
  [data-susy~='4'] * { --susy-columns: 2 }
}
```

<!-- slide -->

## Background Images‚Ä¶

```css
main {
  background-image: var(--debug-image);
  background-size: var(--debug-image-size);
  margin: var(--static-gutters) auto;
  overflow: hidden;
}
```

<!-- slide -->

---
demo: 'css-susy'
resize: true
caption: |
  [AG Grid Nesting Test](http://oocss.org/grids_docs.html)
  from OOCSS
---

<!-- slide -->

---
image: '/images/dynamic-css/susy-no.jpg'
alt: 'Susy, scribbled out'
style:
  --image-size: 'contain'
---

<!-- slide -->

## Manipulate **`hsl()`** Values

```css
* {
  --h: 330;
  --s: 100%;
  --l: 34%;
  background: hsl(var(--h), var(--s), var(--l));
}
```

<!-- slide -->

## Use **Radial** Values to Theme

```css
* {
  --darken: calc(var(--l) - 20%);
  --complement: calc(var(--h) - 180);
  background: hsl(var(--complement), var(--s), var(--darken));
}
```

<!-- slide -->

## Use "**Clamped**" Values to Toggle

```css
* {
  --threshold: 55; /* toggle 'contrast' between white & black */
  --contrast: calc((var(--l) - var(--threshold)) * -100%);
  color: hsl(var(--h), var(--s), var(--contrast));
}
```

<!-- slide -->

---
demo: 'hslTheme'
caption: |
  Inspired by [Facundo Corradini](https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/)
  | Demo: [talks.oddbird.net/demos/hsl-theme/](/demos/hsl-theme/)
---

<!-- slide -->

## JS `getPropertyValue()` **&** `setProperty()`

```js
let currentColor = footer.style.getPropertyValue('--color');
footer.style.setProperty('--color', newColor);
```

<!-- slide -->

## üëé
## Unknown **Types**
Transition known properties, not variables

<!-- slide -->

## Houdini [Properties & Values API][values] **\***
**\*** Experimental (behind Chrome flag)

[values]: https://drafts.css-houdini.org/css-properties-values-api/

<!-- slide -->

```js
CSS.registerProperty({
  name: "--brand-color",
  syntax: "<color>",
  initialValue: "pink",
  inherits: true,
});
```

<!-- slide -->

## *Proposed **CSS Syntax**

```css
@property --brand-color {
  syntax: "<color>";
  initialValue: "pink";
  inherits: true;
}
```

<!-- slide -->

## Other Issues:

1. Don't work inside `url()`
2. ~~`var(--size)em`~~ **=>** `calc(var(--size) * 1em)`

<!-- slide -->

## 2017: **Jet Packs***!
*Kinda

<!-- slide -->

## 2017: CSS **Grid**
Firefox 52 **&** Chrome 57 **&** Safari 10

<!-- slide -->

## **Nothing** Like It
At All

<!-- slide -->

# The Spec is **Complex**‚Ä¶
## **Getting Started** Is Not

<!-- slide -->

## Truly **Two-Dimensional** Layouts
columns & rows!

<!-- slide -->

---
demo: 'layoutGrid'
caption: 'Grid lines 1-indexed and -1 in reverse (see dev tools)'
---

<!-- slide -->

## **Global** Flow && Sizing
With **`auto`** escape-hatch to element flow‚Ä¶

```css
body {
  display: grid;
  grid-gap: 0.5em;
  grid-template-rows: auto 1fr auto;
  grid-template-columns: minmax(14em, auto) minmax(0, 1fr);
}
```

<!-- slide -->

## Named Areas

```css
body {
  grid-template-areas: 'header header'
                       'nav main'
                       'footer footer';
}

h1 { grid-area: header; }
nav { grid-area: nav; }
main { grid-area: main; }
footer { grid-area: footer; }
```

<!-- slide -->

## **Single** Source of Truth

```scss
@media (max-width: 50em) {
  body {
    grid-template: 'header'
                   'nav'
                   'main'
                   'footer';
  }
}
```

<!-- slide -->

---
demo: 'layoutGrid'
caption: 'Resize window to see media-query in action‚Ä¶'
---

<!-- slide -->

---
style:
  text-align: 'left'
---

## **`%`** => relative to **parent width**
## **`vw`** => relative to **the viewport**
## **`fr`** => relative to **available space**

<!-- slide -->

## **`1fr`** `==` **`minmax(auto, 1fr)`**
### use **`minmax(0, 1fr)`** to allow shrinking

<!-- slide -->

## 2018: **Intrinsic** Web Design
[Jen Simmons](https://twitter.com/jensimmons/status/980980521848127488)

<!-- slide -->

## Fluid **&** Fixed

<!-- slide -->

## **Stages** of **Squishiness**

<!-- slide -->

1. **fixed**
2. **fluid** (`fr`)
3. **fluid**-until-**fixed** (`minmax()` | `flex-basis`)
4. **flow** (`auto`)

<!-- slide -->

## **Nested** Contexts
flexbox, grid, float, etc‚Ä¶

<!-- slide -->

## Expand & Contract **Content**
justify, wrap, flex, etc‚Ä¶

<!-- slide -->

## Media Queries, **As Needed**
`repeat(` **`auto-fit`** `, minmax(` **`20em`** `,` **`1fr`** `))`

<!-- slide -->

## **Data-Driven** Layouts
`<div style="` **`--start`**`: 30;` **`--duration`**`: 60;">`

<!-- slide -->

---
image: '/images/layouts/schedule.jpg'
alt: 'Screenshot of schedule grid'
style:
  --image-size: contain
---

<!-- slide -->

## Bar **Charts**

```html
<dl class="chart" style="--scale: 100">
  <dt class="date">2000</dt>
  <dd class="bar" style="--value: 45">45%</dd>

  <dt class="date">2001</dt>
  <dd class="bar" style="--value: 100">100%</dd>

  <!-- etc‚Ä¶ -->
</dl>
```html

<!-- slide -->

```css
.bar {
  --start: calc(var(--scale) + 1 - var(--value));
  grid-row-start: var(--start);
}
```

<!-- slide -->

---
demo: 'cssChart'
resize: true
caption: |
  [Article on **CSS Tricks**](https://css-tricks.com/css-charts-grid-custom-properties/)
  | Demo: [talks.oddbird.net/demos/css-chart/](/demos/css-chart/)
---

<!-- slide -->

---
image: '/images/dynamic-css/cssconfar18/daniela.jpg'
caption: |
  Daniela V√°zquez ([@d4tagirl](https://twitter.com/d4tagirl))
  data visualization at **CSS Conf Argentina**
---

<!-- slide -->

---
demo: 'cssPlot'
resize: true
caption: |
  Demo: [talks.oddbird.net/demos/css-plot/](/demos/css-plot/)
---

<!-- slide -->

---
demo: 'cssLinegraph'
resize: true
caption: |
  Demo: [talks.oddbird.net/demos/css-linegraph/](/demos/css-linegraph/)
---

<!-- slide -->

---
image: '/images/layouts/invade.jpg'
caption: |
  [Levitated Toy Factory](http://levitated.guru/work/)
  at **Beyond Tellerand**
---

<!-- slide -->

---
demo: 'vue-invaders'
resize: true
---

<!-- slide -->

## [Lea Verou](http://twitter.com/leaverou): Variables
[video](https://www.youtube.com/watch?v=2an6-WVPuJU)
| [slides](http://leaverou.github.io/css-variables)

<!-- slide -->

## **Rachel Andrew**: gridbyexample.com
examples, templates, and fallbacks

<!-- slide -->

## **Jen Simmons**: youtube.com/layoutland
also: labs.jensimmons.com

<!-- slide -->

---
demo: 'cssAwesome'
resize: true
caption: |
  Inspired by [Stacy Kvernmo](https://codepen.io/stacy/pen/VxvpBj)
  | Demo: [talks.oddbird.net/demos/css-awesome/](/demos/css-awesome/)
---

<!-- slide -->

---
layout: template
---

## Have **Fun**!

<!-- slide -->

---
layout: contact
form:
  email: 'birds@oddbird.net'
  next: 'http://oddbird.net/contact/thanks'
  submit: 'send it!'
---

