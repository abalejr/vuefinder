---
title: Building Systems
subtitle: that Scale
event: Advanced CSS & Sass
home: /advanced-css/
author: miriam
tags: [css, sass, design systems, components, variables, naming, grid, layout]
---

<!-- slide -->

---
layout: title
---

<!-- slide -->

## **Organizing** CSS

<!-- slide -->

## `~`2007: Major **Grid Frameworks**
Blueprint, 960gs, etc‚Ä¶

<!-- slide -->

---
image: '/images/layouts/12-after.jpg'
caption: Add a gutter on the right margin...
style:
  --image-size: contain
---

<!-- slide -->

## **Classes** Are The **API**

<!-- slide -->

## `class="`**`column col6of12 last`**`"`

<!-- slide -->

## üëç
## Provide **Consistent Patterns**

<!-- slide -->

## üëç
## Handle **Float Hacks**

<!-- slide -->

---
caption: |
  I make way too much of my living
  fixing this problem‚Ä¶
---

## üëé
## Bootstrap **Override Hell**

<!-- slide -->

---
split:
  image: '/images/advanced-css/natalie.jpg'
  size: contain
---

# Natalie Downe | [@natbat](https://twitter.com/natbat)
### 2008: [**CSS Systems**][sys]

[sys]: http://www.slideshare.net/nataliedowne/css-systems-presentation

<!-- slide -->

---
image: '/images/patterns/systems.png'
alt: Cover page from 2008 CSS Systems talk by Natalie Downe
style:
  --image-size: contain
---

<!-- slide -->

## **Conventions** `>` Frameworks

- **Shared** Vocabulary
- **Reusable** Patterns
- **Personalized** Styles

<!-- slide -->

## Avoid The "**Cute Duckling Scam**"
`colors.css` | `layout.css` | `typography.css`

<!-- slide -->

---
todo: IMAGE separation of concerns?
---

<!-- slide -->

## "Use **The Cascade**"
Higher specificity `=>` Higher specificity

1. **Elements** `=>` Grouped by **Type**
2. **Classes** `=>` Grouped by **Effect**
3. **IDs** `=>` Grouped by **Component**

<!-- slide -->

### General
### **‚¨á**
### Patterns
### **‚¨á**
### Structures
### **‚¨á**
### Components
### **‚¨á**
### Overrides

<!-- slide -->

---
caption: |
  **\*** Before Media Queries & RWD‚Ñ¢
---

## **Responsive** Layouts **\***
### with
## **Fluid** Components

<!-- slide -->

## **`max-width`**`: 100%;`

<!-- slide -->

## Be **Afraid of Heights**
we never know how tall things are...

<!-- slide -->

## **Fluid** Math
### `target` **`/`** `context` **`==`** `multiplier`
`width: calc(<target> / <context> * 100%)`

<!-- slide -->

1. **Define** it
2. **Develop** it
3. **Maintain** it
4. **Communicate** it

<!-- slide -->

---
split:
  image: '/images/advanced-css/nicole.jpg'
  size: cover
---

# Nicole Sullizan | [@stubbornella](https://twitter.com/stubbornella)
### 2009: [**Object Oriented CSS**](https://github.com/stubbornella/oocss)

<!-- slide -->

> a CSS ‚Äúobject‚Äù is a **repeating visual pattern**,
> that can be **abstracted** into an **independent** snippet
> of **HTML, CSS, and possibly JavaScript**.
>
> ---Nicole Sullivan, [OOCSS](https://github.com/stubbornella/oocss)

<!-- slide -->

## Separate **Structure** & **Skin**

- **Reusable CSS** patterns across components
- **Adjustable Themes** for each component

<!-- slide -->

## Separate **Container** & **Content**
### "Rarely use **location-dependent** styles"

<!-- slide -->

---
caption: |
  BEM is what happens
  when you change "rarely" to "never"
---

## **`.category-header`** `>` `.category h2`

<!-- slide -->

## Also from **OOCSS**...

- **Media Object** Pattern
- Composable **Utility Classes**
- a whole lot more...

<!-- slide -->

## 2009-Present: **Repackaged**
Atomic Design, SMACSS, BEM, ITCSS, etc...

<!-- slide -->

## ¬Ø\\\_**(„ÉÑ)**_/¬Ø
## All are **Useful**
**None** are Perfect | Mix and Match!

<!-- slide -->

---
image: '/images/patterns/itcss-metrics.png'
style:
  --image-size: contain
caption: |
  [**Inverted Triangle**](http://technotif.com/manage-large-css-projects-with-itcss/)
  by [**Harry Roberts**](https://twitter.com/csswizardry)
---

<!-- slide -->

---
image: '/images/patterns/un-itcss-metrics.png'
style:
  --image-size: contain
caption: |
  **Normal Triangle** by ~~Maslow~~ **Miriam**
---

<!-- slide -->

## **Cascading** Style Sheets
Invented for **Reusable Patterns**

<!-- slide -->

## Semantics **Improve Maintainance**
Write **Meaningful Code**

<!-- slide -->

## Code is **Communication**
Most coding is maintainance...

<!-- slide -->

## **DRY**: **D**on't **R**epeat **Y**ourself
### `.warning { border-color: red; }`

<!-- slide -->

## **DSfP**: **D**on't **S**tretch **f**or **P**atterns
### `.all-red-border-things { border-color: red; }`

<!-- slide -->

## **Reusable** | **Isolated**
The **Cascade** is about **Balance**

<!-- slide -->

---
image: '/images/patterns/itcss-metrics.png'
style:
  --image-size: contain
---

<!-- slide -->

---
image: '/images/patterns/itcss-layers.png'
style:
  --image-size: contain
---

<!-- slide -->

---
image: '/images/patterns/itcss-layers-note.png'
style:
  --image-size: contain
---

<!-- slide -->

## Design **Tokens** (Settings)
![Color preview screenshot](https://dl.dropbox.com/s/onv9n6628lmcpbv/color-preview.jpg)

<!-- slide -->

## CSS **Custom Properties**

```css
:root {
  --color-text-default: rgb(62, 62, 60);
  --color-text-warning: rgb(255, 183, 93);
  --color-text-error: rgb(194, 57, 52);
}

.example {
  background: var(--color-text-error);
}
```

<!-- slide -->

## üëç **Browser** Support

<!-- slide -->

## üëé Not **Meaningfully** Organized
## üëé Encourages **One-Offs**
## üëé Difficult to **Automate**

<!-- slide -->

## Sass **Variables**

```scss
$color-text-default: rgb(62, 62, 60);
$color-text-warning: rgb(255, 183, 93);
$color-text-error: rgb(194, 57, 52);

.example {
  background: $color-text-error;
}
```

<!-- slide -->

## üëé Not **Meaningfully** Organized
## üëé Encourages **One-Offs**
## üëé Difficult to **Automate**

<!-- slide -->

---
caption: |
  See [OddBird's **Accoutrement**](https://oddbird.net/accoutrement/)
---

## Sass **Maps**

```scss
$text-colors: (
  'default': rgb(62, 62, 60),
  'warning': rgb(255, 183, 93),
  'error': rgb(194, 57, 52),
);

.example {
  background: color('error');
}
```

<!-- slide -->

## The **Map Problem**

```scss
$colors: (
  'brand-blue': hsl(195, 85%, 35%),
  'gray': desaturate(map-get($colors, 'brand-blue'), 80%),
);
```

### **`[ERROR] Undefined variable: "$colors".`**

<!-- slide -->

## Map **Self-Reference**

```scss
$colors: (
  '_brand-pink': hsl(330, 85%, 68%),
  'escher': '#_brand-pink',
  'godel': '#escher',
  'bach': '#godel',
  'kevin bacon': '#bach' ('lighten': 20%),
);
```

<!-- slide -->

---
style:
  --align-self: stretch
  background-color: hsl(330, 85%, 48%)
  color: white
  display: flex
  align-items: center
  justify-content: center
---

## `color('kevin bacon')`

<!-- slide -->

## üëç **Meaningful** Relationships!
## üëç Encourages **Patterns**
## üëç **Functional** Adjustments

<!-- slide -->

## üëé **Requires** Additional Tooling

<!-- slide -->

## Even More **Layers**
**Global** Settings ¬ª **Theme** Defaults ¬ª **Component** Details

<!-- slide -->

```scss
$brand-colors: (
  '_brand-blue': hsl(195, 85%, 35%),
  '_brand-pink': hsl(330, 85%, 48%),
);

$theme-colors: (
  'text': ‚Ä¶,
  'border': ‚Ä¶,
  // ...
);

$button-colors: (
  'button-text': ‚Ä¶,
  'button-border': ‚Ä¶,
  // ...
);
```

<!-- slide -->

---
image: '/images/patterns/itcss-layers-note.png'
style:
  --image-size: contain
---

<!-- slide -->

## "Code is **Communication**"
‚ÄîSarah Drasner

<!-- slide -->

```scss
.grid-span {
  width: 23.7288136%;
  margin-right: 01.6949153%;
  padding-left: 08.4745763%;
}
```

<!-- slide -->

```scss
.grid-span {
  width: ((3*4em) + (2*1em)) / ((12*4em) + (11*1em)) * 100%; // 23.7288136%
  margin-right: 1em / ((12*4em) + (11*1em)) * 100%; // 01.6949153%
  padding-left: ((1*4em) + (1*1em)) / ((12*4em) + (11*1em)); // 08.4745763%
}
```

<!-- slide -->

## Code Patterns **Add Meaning**

```scss
.grid-span {
  width: span(3);
  margin-right: gutter();
  padding-left: span(1 wide);
}
```

<!-- slide -->

---
layout: todo
---

- Establishing Conventions:
  - CSS Systems & OOCSS
  - Atomic Design / BEM / SMACSS / ITCSS
  - Attribute Selectors
  - (Design Systems)
- Separation of concerns / layers
- Single File Components & scoping
- Importing abstractions
- Using Sass maps for organization
- Recursion and reference
- Looping
- Testing

<!-- slide -->

---
layout: todo
---

### Assignment:

- Write a map of colors
- Write a function & tests to access the map
- Write a loop to display colors?
- Use `data-` attributes as selectors
